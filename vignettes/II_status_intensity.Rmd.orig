---
title: "II. Status and Intensity Data"
author: "Lee Marsh"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteEngine{knitr::knitr}
  %\VignetteIndexEntry{02. Status and Intensity Data}
  %\usepackage[UTF-8]{inputenc}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(rnpn)
```

# Status and Intensity Data

The Status and Intensity data type provides our observational phenology data in its most basic form.. Each row is comprised of a single record of the status (1/present/“Yes”, 0/absent/“No” or -1/uncertain/“?”) of a single phenophase on an individual plant or species of animal at a site on a single site visit. It also includes (if reported by the observer) information about the degree to which the phenophase was expressed in the form of an estimated intensity (e.g. percent canopy fullness) or abundance (e.g., number of individual robins observed).

Retrieving this kind of data using this package is easy, and heavily parameterized. It is possible to filter data using a number of parameters including year, geographic extent and species. In this example we get all records of bird observations in the New England states from 2018.

```{r}
npn_download_status_data(
  request_source = 'Your Name Here',
  years = c('2018'),
  states = c("CT","RI","MA","NH","VT","ME"),
  functional_types = 'Bird'
)
```

'states' is an example of an optional parameter that allows you to filter data based on geographic location. Another example is 'functional_types' which allows you to get all available data for a group of similar species (e.g., all birds, shrubs or invasive species).
The best place to review **all** available optional filters is the autogenerated package description.

Another important optional parameter is called 'download_path'. By default requests for data from the services are returned as a data frame that gets stored in memory as a variable. In some cases, it makes more sense to save the data to file for easy and fast retrieval later. The download_path parameter allows you to specify a file path to redirect the output from the service, without having to fuss with pesky I/O operations. Additionally, requests made this way streams the data returned, so if the dataset you're working with is particularly large, it's possible to redirect the stream of data to file instead of loading it all into memory which can be useful if your environment doesn't have enough RAM to store the entire data set at once.


```{r eval=FALSE}
npn_download_status_data(
  request_source = 'Your Name Here',
  years = c('2018'),
  functional_types = 'Bird',
  additional_fields = 'Site_Name',
  download_path ='Bird_data_2018_SiteName.csv'
)
```


Using this function to get observational records in their most basic form is the most robust for doing analysis, but there are a number of other products offered through the data service which provide additional value to data end users, outlined in the following articles.


